from environs import Env

from django.core.management.base import BaseCommand
from ugc.models import Profile, Stuff, Exchange


import logging
import random
import os
import uuid

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, KeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)


env = Env()
env.read_env()
TOKEN = env.str('TOKEN')

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

CHOICE, TITLE, PHOTO, CONTACT, LOCATION = range(5)


# –ë–û–¢ - –Ω–∞—á–∞–ª–æ
def start(update: Update, context: CallbackContext) -> int:
    global _want_exchange
    _want_exchange = None
    user = update.effective_user
    update.message.reply_text(f'''
        –ü—Ä–∏–≤–µ—Ç, {user.first_name}!
        –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–±–º–µ–Ω—è—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–Ω—É–∂–Ω–æ–µ –Ω–∞ –æ—á–µ–Ω—å –Ω—É–∂–Ω–æ–µ.
        –ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–µ—â—å –∫ –æ–±–º–µ–Ω—É –Ω–∞–ø–∏—à–∏ - ‚Äú–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å‚Äù.
        –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–±–µ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤–µ—â–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –ù–∞–ø–∏—à–∏ ‚Äú–ù–∞–π—Ç–∏ –≤–µ—â—å‚Äù –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–µ—â–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞.
        –ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –≤–µ—â—å - –ø–∏—à–∏ ‚Äú–û–±–º–µ–Ω—è—Ç—å—Å—è‚Äù, –Ω–µ—Ç - —Å–Ω–æ–≤–∞ –Ω–∞–±–∏—Ä–∞–π ‚Äú–ù–∞–π—Ç–∏ –≤–µ—â—å‚Äù.
        –ù–∞–∂–∞–ª ‚Äú–æ–±–º–µ–Ω—è—Ç—å—Å—è‚Äù? - –µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤–µ—â–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö –≤–µ—â–µ–π, —Ç–æ —è –ø—Ä–∏—à–ª—é –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤–∞–º –æ–±–æ–∏–º.
        ''',
                              )
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å', '–ù–∞–π—Ç–∏ –≤–µ—â—å']]
    # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –î–ë, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ª–æ–∫–∞—Ü–∏—è
    is_contact, is_location = add_user_to_db(update.message.chat_id, user)
    #if not is_contact:
    #    update.message.reply_text(
    #        text=(f'''
    #                –ü—Ä–∏–≤–µ—Ç, {user.first_name}!
    #                –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.
    #                '''
    #              )
    #    )
    #    return CONTACT
    #if not is_location:
    #    keyboard_location = [
    #    [KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)],
    #]
    #    update.message.reply_text(
    #        text='–£ –º–µ–Ω—è –Ω–µ—Ç —Ç–≤–æ–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
    #        reply_markup=ReplyKeyboardMarkup(
    #            keyboard_location, one_time_keyboard=True
    #        ),
    #    )
    #    return LOCATION

    update.message.reply_text('–ß—Ç–æ —Ö–æ—á–µ—à—å?',
                              reply_markup=ReplyKeyboardMarkup(
                                  reply_keyboard, one_time_keyboard=True, input_field_placeholder='–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ?'
                                  ),
                              )
    return CHOICE


#–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –î–ë
def add_user_to_db(chat_id, user):
    profile, _ = Profile.objects.get_or_create(external_id=chat_id)

    logger.info(f'Get profile {profile}')
    profile.username = user.username or ''
    profile.first_name = user.first_name or ''
    profile.last_name = user.last_name or ''

    profile.save()

    logger.info(f'Update_user {profile.external_id}, username '
                f'{profile.username}, contact {profile.contact}')
    logger.info(
        f'Is user contact: {bool(profile.username or profile.contact)}')
    return profile.username or profile.contact, bool(profile.lat)


#–ë–û–¢ - –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å
def add_item(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("choice of %s, %s: %s", user.first_name,
                user.id, update.message.text)
    update.message.reply_text(
        '–û–∫! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏',
        reply_markup=ReplyKeyboardRemove(),
    )
    return TITLE


#—Å–æ–∑–¥–∞–µ–º –≤–µ—â—å –≤ –ë–î
def create_new_stuff(chat_id, user, title):
    profile = Profile.objects.get(external_id=chat_id)
    stuff = Stuff.objects.create(
        profile=profile,
        description=title,
    )
    return stuff.id


#–ë–û–¢ - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏
def title(update: Update, context: CallbackContext) -> int:
    global _new_stuff_id
    user = update.message.from_user
    stuff_title = update.message.text
    stuff_id = create_new_stuff(update.message.chat_id, user,
                                stuff_title)
    _new_stuff_id = stuff_id
    logger.info("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏ of %s: %s",
                user.first_name, update.message.text)
    update.message.reply_text(
        f'–°–ø–∞—Å–∏–±–æ, –≤–µ—â—å {stuff_title} –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ.')
    return PHOTO


#–ë–û–¢ - –û–±–º–µ–Ω—è—Ç—å—Å—è
def want_exchange(update: Update, context: CallbackContext) -> int:
    global _user_id
    global _want_exchange
    global _stuff_descr
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å', '–ù–∞–π—Ç–∏ –≤–µ—â—å', '–û–±–º–µ–Ω—è—Ç—å—Å—è']]
    find_exchangers = Exchange.objects.filter(
        second_user_id=update.message.chat_id,
        first_stuff_descr__isnull=True)
    if find_exchangers.count() == 0:
        exchange, _ = Exchange.objects.get_or_create(
            first_user_id=update.message.chat_id,
            second_user_id=_user_id,
            second_stuff_descr=_stuff_descr
        )
        exchange.save()
    else:
        for find_exchanger in find_exchangers:
            msg1 = f"–£–†–ê!!! –í–∞—à—É –≤–µ—â—å {find_exchanger.second_stuff_descr} —Ö–æ—Ç—è—Ç –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ {_stuff_descr}, –∫–æ–Ω—Ç–∞–∫—Ç—ã: {find_exchanger.contact}"
            context.bot.send_message(chat_id=update.message.chat_id, text=msg1)
            msg2 = f"–£–†–ê!!! –í–∞—à—É –≤–µ—â—å {_stuff_descr} —Ö–æ—Ç—è—Ç –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ {find_exchanger.second_stuff_descr}, –∫–æ–Ω—Ç–∞–∫—Ç—ã: {find_exchanger.contact}"
            context.bot.send_message(chat_id=_user_id, text=msg2)
        find_exchangers.update(first_stuff_descr=_stuff_descr)

    _want_exchange = _user_id

    update.message.reply_text(
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–º–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True
        ),
    )
    return CHOICE


#–¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–µ—â–∏
def add_photo_to_new_stuff(chat_id, photo_url, _new_stuff_id):
    stuff = Stuff.objects.get(id=_new_stuff_id)
    stuff.image_url = photo_url
    stuff.save()
    return stuff.id


def photo(update: Update, context: CallbackContext) -> int:
    images_dir = os.path.join(os.getcwd(), 'images')
    os.makedirs(images_dir, exist_ok=True)
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å', '–ù–∞–π—Ç–∏ –≤–µ—â—å']]
    global _new_stuff_id
    user = update.message.from_user
    newFile = update.message.effective_attachment[-1].get_file()
    file_name = f"{str(uuid.uuid4())}.jpg"
    full_path_file = os.path.join(images_dir, file_name)
    newFile.download(full_path_file)
    add_photo_to_new_stuff(update.message.chat_id, os.path.join('images', file_name),
                           _new_stuff_id)
    logger.info("Photo of %s: %s", user.first_name, file_name)
    update.message.reply_text(
        '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —á—Ç–æ –¥–∞–ª—å—à–µ –¥–µ–ª–∞–µ–º?',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True
        ),
    )
    return CHOICE


# –ë–û–¢ - –Ω–∞–π—Ç–∏ –≤–µ—â—å
def find_item(update: Update, context: CallbackContext) -> int:
    global _user_id
    global _stuff_descr
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å', '–ù–∞–π—Ç–∏ –≤–µ—â—å', '–û–±–º–µ–Ω—è—Ç—å—Å—è']]
    profile = Profile.objects.get(external_id=update.message.chat_id)
    if _want_exchange:
        pk_list = [_want_exchange]
        clauses = ' '.join(['WHEN id=%s THEN %s' % (pk, i)
                           for i, pk in enumerate(pk_list)])
        ordering = 'CASE %s END' % clauses
        stuff = list(Stuff.objects.exclude(profile=profile.id).extra(
           select={'ordering': ordering}, order_by=('ordering',)))
    else:
        stuff = list(Stuff.objects.exclude(profile=profile.id))
    random_stuff = random.choice(stuff)
    _user_id = random_stuff.profile.external_id
    _stuff_descr = random_stuff.description
    logger.info(f"Show item: {random_stuff.description}")
    context.bot.send_photo(chat_id=update.message.chat_id,
                           photo=open(random_stuff.image_url, 'rb'))
    update.message.reply_text(
        f'–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–µ—â—å: {random_stuff.description}. –ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å?',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True
        ),
    )
    return CHOICE


#–¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –ë–î
def location(update: Update, context: CallbackContext) -> int:
    profile = Profile.objects.get(external_id=update.message.chat_id)
    if update.message.location:
        profile.lat = update.message.location.latitude
        profile.lon = update.message.location.longitude
        profile.save()
        reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å', '–ù–∞–π—Ç–∏ –≤–µ—â—å']]
        update.message.reply_text(
            f'–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {profile.lat}, {profile.lon},'
            f'—Å–ø–∞—Å–∏–±–æ! –ò—Ç–∞–∫, —á—Ç–æ –∂–µ–ª–∞–µ—à—å?',
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True
            )
        )
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {profile.external_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ '
                    f'–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {profile.lat}, {profile.lon}')
    return CHOICE


#–ë–û–¢ - –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–æ–ø
def stop(update, context):
    user = update.effective_user
    update.message.reply_text(f'–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user.first_name}!')
    return ConversationHandler.END


#–ë–û–¢ - –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
def unknown(update, context):
    reply_keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å', '–ù–∞–π—Ç–∏ –≤–µ—â—å']]
    update.message.reply_text(
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —ç—Ç–∏–º —Å–∫–∞–∑–∞—Ç—å, –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞',
        reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True
        )
    )
    return CHOICE


def error(bot, update, error):
    logger.error('Update "%s" caused error "%s"', update, error)
    return CHOICE


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç'

    def handle(self, *args, **options):
        # Create the Updater and pass it your bot's token.
        updater = Updater(TOKEN)

        # Get the dispatcher to register handlers
        dispatcher = updater.dispatcher

        # Add conversation handler with the states CHOICE, TITLE, PHOTO, LOCATION
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                CHOICE: [
                    MessageHandler(Filters.regex('^–î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å$'),
                                   add_item),
                    MessageHandler(Filters.regex('^–ù–∞–π—Ç–∏ –≤–µ—â—å$'),
                                   find_item),
                    MessageHandler(Filters.regex('^–û–±–º–µ–Ω—è—Ç—å—Å—è$'),
                                   want_exchange),
                    MessageHandler(Filters.text & ~Filters.command,
                                   unknown)
                ],

                TITLE: [MessageHandler(Filters.text & ~Filters.command, title)],
                PHOTO: [MessageHandler(Filters.photo, photo)],
                LOCATION: [MessageHandler(Filters.location, location)],
            },
            fallbacks=[CommandHandler('stop', stop)],
        )

        dispatcher.add_handler(conv_handler)
        dispatcher.add_error_handler(error)

        # Start the Bot
        updater.start_polling()

        # Run the bot until you press Ctrl-C or the process receives SIGINT,
        # SIGTERM or SIGABRT. This should be used most of the time, since
        # start_polling() is non-blocking and will stop the bot gracefully.
        updater.idle()
